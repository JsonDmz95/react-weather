{"version":3,"sources":["Components/Header.js","Components/Error.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Error","message","Form","search","updateSearch","updateQuery","useState","error","switchError","city","country","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Weather","result","main","weather","celcius","kelvin","parseFloat","toFixed","src","icon","alt","description","temp","temp_max","temp_min","App","validateComponent","query","updateResult","useEffect","a","url","fetch","response","json","cod","readAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2e2d0039.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wraper pink\">\r\n        <a href=\"/\" className=\"brand-logo\">{title}</a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({ message }) => {\r\n  return <p className=\"white error-p\">{message}</p>;\r\n};\r\n\r\nError.propTypes = {\r\n  message: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Error;\r\n","import React, { useState } from \"react\";\r\nimport Error from \"./Error\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ search, updateSearch, updateQuery }) => {\r\n  //States\r\n  const [error, switchError] = useState(false);\r\n\r\n  //destructuring search\r\n  const { city, country } = search;\r\n\r\n  //get values from de form\r\n  const handleChange = (e) => {\r\n    updateSearch({\r\n      ...search,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //form submited\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //validation\r\n    if (city.trim() === \"\" || country.trim() === \"\") {\r\n      switchError(true);\r\n      return;\r\n    }\r\n\r\n    switchError(false);\r\n\r\n    //send to app\r\n    updateQuery(true);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {error ? <Error message=\"All the fields are requireds\" /> : null}\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"city\"\r\n          id=\"city\"\r\n          value={city}\r\n          onChange={handleChange}\r\n        />\r\n        <label htmlFor=\"city\">City</label>\r\n      </div>\r\n\r\n      <div className=\"input-field col s12\">\r\n        <select\r\n          name=\"country\"\r\n          id=\"country\"\r\n          value={country}\r\n          onChange={handleChange}\r\n        >\r\n          <option value=\"\">-Select Country-</option>\r\n          <option value=\"NI\">Nicaragua</option>\r\n          <option value=\"US\">Estados Unidos</option>\r\n          <option value=\"CR\">Costa Rica</option>\r\n          <option value=\"MX\">México</option>\r\n          <option value=\"AR\">Argentina</option>\r\n          <option value=\"CO\">Colombia</option>\r\n          <option value=\"ES\">España</option>\r\n        </select>\r\n        <label htmlFor=\"country\">Pais</label>\r\n      </div>\r\n\r\n      <div className=\"input-field col s12\">\r\n        <input\r\n          type=\"submit\"\r\n          value=\"View Weather\"\r\n          className=\"waves-effect waves-light btn-large btn-block grey lighten-3\"\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  search: PropTypes.object.isRequired,\r\n  updateSearch: PropTypes.func.isRequired,\r\n  updateQuery: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Weather = ({ result }) => {\r\n  //get values from result\r\n  const { name, main, weather } = result;\r\n\r\n  if (!name) return null;\r\n\r\n  //Kelvin to c\r\n  // const celcius = parseFloat(main.temp - 273.5, 10).toFixed(2);\r\n  const celcius = (kelvin) => {\r\n    return parseFloat(kelvin - 273.5, 10).toFixed(2);\r\n  };\r\n  return (\r\n    <div className=\"card-panel white col s12\">\r\n      <div className=\"black-text\">\r\n        <h2>The weather in {name}:</h2>\r\n\r\n        <img src={`https://openweathermap.org/img/w/${weather[0].icon}.png`} alt=\"weather icon\"/>\r\n        <p className=\"small\">{weather[0].description}</p>\r\n\r\n        <p className=\"temp\">\r\n          {celcius(main.temp)}\r\n          <span>°C</span>\r\n        </p>\r\n\r\n        <p>\r\n          {\" \"}\r\n          Max Temp:&nbsp;\r\n          {celcius(main.temp_max)}\r\n          <span>°C</span>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          Min Temp:&nbsp;\r\n          {celcius(main.temp_min)}\r\n          <span>°C</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nWeather.propTypes = {\r\n  result: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Weather;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"./Components/Header\";\nimport Form from \"./Components/Form\";\nimport Weather from \"./Components/Weather\";\nimport Error from \"./Components/Error\";\n\nfunction App() {\n  // States\n  const [search, updateSearch] = useState({\n    city: \"\",\n    country: \"\",\n  });\n  const [query, updateQuery] = useState(false);\n  const [result, updateResult] = useState({});\n  const [error, switchError] = useState(false);\n\n  //destructuring search\n  const { city, country } = search;\n\n  useEffect(() => {\n    // console.log(city)\n    // updateQuery(false);\n    const readAPI = async () => {\n      if (query) {\n        const appId = \"75ec1b46b2d8e194f931659ddb24ca64\";\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\n\n        const response = await fetch(url);\n        const result = await response.json();\n\n        updateResult(result);\n        updateQuery(false);\n\n        //Valid response?\n        if (result.cod === \"404\") {\n          switchError(true);\n        } else {\n          switchError(false);\n        }\n      }\n    };\n    readAPI();\n    // eslint-disable-next-line\n  }, [query]);\n\n  let validateComponent;\n  if (error) {\n    validateComponent = <Error message=\"No results\" />;\n  } else {\n    validateComponent = <Weather result={result} />;\n  }\n\n  return (\n    <Fragment>\n      <Header title=\"Weather React App\" />\n\n      <div className=\"form-container\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Form\n                search={search}\n                updateSearch={updateSearch}\n                updateQuery={updateQuery}\n              />\n            </div>\n            <div className=\"col s12 m6\">\n              {validateComponent}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}